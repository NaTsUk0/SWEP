class ExploitController():
    def __init__(self):
        self.Options = []
        self.ExploitText = ''
        pass


    def LoadNewExploit(self):
        file = open(raw_input('[*] Input file name: '), 'w+')
        if not file:
            print '[!] Failed to open file, quitting.'
        print '[*] Input your parameter options.'
        print '[*] Example: 1234567'
        print '    | id  name     description'
        print '    | 1   Url      Target Url'
        print '    | 2   Thread   Thread count.'
        print '    | 3   Timeout  Request timeout.'
        print '    | 4   Password Password.'
        print '    | 5   Filename File to read.'
        print '    | 6   Protocol Protocol'
        print '    | 7   command  Command to execute.'
        ParmList = list(int(raw_input('[*] Options: ')))
        temp = ''
        args = ''
        self.ExploitText += ExploitHeader
        self.ExploitText += InfoTemplate
        self.ExploitText += ExploitTemplate
        for item in ParmList:
            temp += ArgsTemplate[ArgsTemplate.keys()[item]]
            args += '\'%s\': \'%s\'\n' %(ArgsDesc.keys()[item], ArgsDesc[ArgsDesc.keys()[item]])
        self.ExploitText.replace('/*REPLACE*/', temp)
        self.ExploitText.replace('/*NAME*/', raw_input('[*] Exploit name: '))
        self.ExploitText.replace('/*DESCRIPTIOJN*/', raw_input('[*] Exploit description: '))
        self.ExploitText.replace('/*DATE*/', raw_input('[*] Date: '))
        self.ExploitText.replace('/*REFERER*/', raw_input('[*] Referer: '))
        self.ExploitText.replace('/*PARM*/', args)
        print '[*] Input todo.'
        print '    | id  name    description'
        print '    | 1   pgget   Fetch page with GET method'
        print '    | 2   pgpost  Post data to page'
        print '    | 3   chktext Check text in page'
        print '    | 4   chkcode Check status code of last response'
        print '    | 5   cstcod  Custom code.'
        print '[*] Input "q" to exit.'
        ExploitCode = self.GetInformation()
        ExploitCode += InformationTemplate
        file.write(ExploitCode)
        print '[+] Exploit generate success.'
        file.close()
        return



    def GetInformation(self):
        try:
            while True:
                mode = raw_input('[*] TODO: ')
                if mode == 'q':
                    break
                mode = int(mode)
                if mode == 1:
                    print '[*] Please input url payload. '
                    print '[*] e.g. index.php?test=test'
                    url = raw_input('[*] URL Payload: ')
                    self.ExploitText += UrlGetRequestTemplate.replace('/*REPLACE*/', url.replace(' ', '%20').replace('#', '%23'))
                elif mode == 2:
                    print '[*] Please input url payload. '
                    print '[*] e.g. index.php?test=test'
                    url = raw_input('[*] URL Payload: ')
                    print '[*] Please input POST data, escape LF as \\n.'
                    print '[*] e.g. test=123'
                    postdata = raw_input('[*] POST data: ').replace('\\n', '\n')
                    self.ExploitText += UrlPostRequestTemplate.replace('/*REPLACE*/', url.replace(' ', '%20').replace('#', '%23')).replace('/*POSTDATA*/', postdata.replace('\\n', '\n'))
                elif mode == 3:
                    print '[*] Please input regex.'
                    regex = raw_input('[*] REGEXP: ')
                    self.ExploitText += VerifyPageTextTemplate.replace('/*REPLACE*/', regex)
                elif mode == 4:
                    print '[*] Please input response status code.'
                    code = raw_input('[*] Status Code: ')
                    self.ExploitText += VerifyResponseCodeTemplate.replace('/*REPLACE*/', code)
                elif mode == 5:
                    self.ExploitText += raw_input('[*] Custom Code: ')
                else:
                    print '[!] Mode not specified.'
        except Exception, e:
            print '[!] Failed to generate exploit: %s' %(str(e))
        return self.ExploitText


ArgsTemplate = {
    'url':
'''
        self.Url = None
''',
    'thread':
'''
        self.Thread = 10
''',
    'timeout':
'''
        self.Timeout = 3
''',
    'password':
'''
        self.Password = None
''',
    'filename':
'''
        self.Filename = None
''',
    'protocol':
'''
        self.Protocol = 'http'
''',
    'command':
'''
        self.Command = None
'''
}


ArgsDesc = {
    'Url':
'''
            Target URL.
''',
    'Thread':
'''
            Thread. Default: 10
'''
    ,
    'Timeout':
'''
            Request Timeout. Default: 3
''',
    'Password':
'''
            Shell password.
'''
    ,
    'Filename':
'''
            File to download.
'''
    ,
    'Protocol':
'''
            Protocol. Default: http
''',
    'Command':
'''
            Command to execute.
'''
}


InfoTemplate = '''
def info(): # Exploit information for database mechanism
    info = {
        'name': '/*NAME*/',
        'description': '/*DESCRPITION*/',
        'date': '/*DATE*/',
        'parameters': {
            /*PARM*/
        },
        'referer': '/*REFERER*/, Generated by SWEP Exploit controller.'
    }
    return info

'''


ExploitHeader = \
'''
import requests
import re


# Generated by SWEP Exploit generator
# Using common web template
# By BREACHERS security

'''

ExploitTemplate = \
'''
class Exploit():
    def __init__():
    /*REPLACE*/
        pass
    
    
    def Exploit():
        
'''

UrlGetRequestTemplate = \
'''
        try:
            url = /*REPLACE*/ # URL to replace
            resp = request.get('%s://%s/%s' %(self.Protocol, self.Url, url), timeout=int(self.Timeout))
        except request.Timeout:
            while raw_input('[*] SWEP Got a request timeout. Do you want to retry?(Y/n)').upper() != 'N':
                resp = request.get('%s://%s/%s' %(self.Protocol, self.Url, url), timeout=int(self.Timeout))
        except Exception, e:
            print '[!] Failed to get page %s:, %s' %(url, str(e))
            return
'''


UrlPostRequestTemplate = \
'''
        try:
            url = /*REPLACE*/ # URL to replace
            resp = request.post('%s://%s/%s' %(self.Protocol, self.Url, url), timeout=int(self.Timeout), '/*POSTDATA*/')
        except request.Timeout:
            while raw_input('[*] SWEP Got a request timeout. Do you want to retry?(Y/n)').upper() != 'N':
                resp = request.post('%s://%s/%s' %(self.Protocol, self.Url, url), timeout=int(self.Timeout), '/*POSTDATA*/')
        except Exception, e:
            print '[!] Failed to post page %s:, %s' %(url, str(e))
            return
'''


VerifyPageTextTemplate = \
'''
        FoundList = re.findall('/*REPLACE*/', resp.text):
            print '[+] Exploit success.'
            print '[+] Incoming response:'
            for item in FoundList:
                print '    | %s' %(item)
            pass
'''


VerifyResponseCodeTemplate = \
'''
        if resp.code == /*REPLACE*/:
            print '[+] Exploit success, code of response=/*REPLACE*/'
        pass
'''

InformationTemplate = \
'''
    def info(self):
        ExpInf = info()
        print '[*] Incoming exploit information.'
        print ' |   NAME: %s' %(ExpInf['name'])
        print ' |   DESCRIPTION: %s' %(ExpInf['description'])
        print ' |   DATE: %s' %(ExpInf['date'])
        print ' |   PARAMETERS:'
        parameters = ExpInf['parameters']
        for item in ExpInf['parameters'].keys():
            print ' |   |  %s: %s' %(item, parameters[item])
        print ' |   REFERER: %s' %(ExpInf['referer'])
        return
'''
